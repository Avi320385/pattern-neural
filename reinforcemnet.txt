import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import confusion_matrix, accuracy_score
import matplotlib.pyplot as plt
import seaborn as sns

# Load the dataset
file_path = 'pattern2.csv'
df = pd.read_csv(file_path)

# Convert 'Deaths' column to binary classification
df['Deaths_binary'] = (df['Deaths'] > 0).astype(int)

# Select features and target
X = df[['population', 'Cases', 'Deaths']]
y = df['Deaths_binary']

# Standardize the features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Split the data into training and testing sets (80:20)
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# Convert to NumPy arrays for Q-learning
X_train = np.array(X_train)
X_test = np.array(X_test)
y_train = np.array(y_train)
y_test = np.array(y_test)

# Initialize Q-table with zeros (for binary classification, two possible actions)
num_features = X_train.shape[1]
num_actions = 2
Q_table = np.zeros((len(X_train), num_features * num_actions))

# Define Q-Learning parameters
alpha = 0.1  # Learning rate
gamma = 0.9  # Discount factor
epsilon = 0.1  # Exploration rate

# Train Q-Learning agent
num_episodes = 100
reward_list = []

for episode in range(num_episodes):
    total_reward = 0
    
    for i in range(len(X_train)):
        state = X_train[i]
        action = np.argmax(Q_table[i])  # Choose action with highest Q-value (exploitation)

        # Simulate reward based on predicted action
        if action == y_train[i]:
            reward = 1
        else:
            reward = 0

        # Update Q-table
        next_state = X_train[i]  # In this case, next_state is the same as state
        next_action = np.argmax(Q_table[i])
        td_target = reward + gamma * np.max(Q_table[i])
        td_error = td_target - Q_table[i][action]
        Q_table[i][action] += alpha * td_error

        total_reward += reward
    
    reward_list.append(total_reward)

# Evaluate on test set
y_pred = []
for state in X_test:
    q_values = [np.max(Q_table[i]) for i in range(len(X_test))]
    action = np.argmax(q_values)
    y_pred.append(action)

# Calculate confusion matrix and accuracy
cm = confusion_matrix(y_test, y_pred)
accuracy = accuracy_score(y_test, y_pred)

print("Confusion Matrix:\n", cm)
print("Accuracy Score:", accuracy)

# Plot the reward curve
plt.figure(figsize=(12, 6))
plt.plot(reward_list)
plt.xlabel('Episode')
plt.ylabel('Total Reward')
plt.title('Total Reward per Episode in Q-Learning')
plt.show()

# Plot the confusion matrix
plt.figure(figsize=(8, 6))
sns.heatmap(cm, annot=True, fmt="d", cmap="Blues")
plt.title('Confusion Matrix')
plt.xlabel('Predicted Label')
plt.ylabel('True Label')
plt.show()
