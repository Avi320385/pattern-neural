import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import Perceptron
from sklearn.metrics import classification_report, confusion_matrix, precision_recall_fscore_support
import matplotlib.pyplot as plt
import seaborn as sns

# Load the dataset
file_path = 'pattern2.csv'
df = pd.read_csv(file_path)

# Convert 'Deaths' column to binary classification
df['Deaths_binary'] = (df['Deaths'] > 0).astype(int)

# Select features and target
selected_features = ['population', 'Cases', 'Deaths']
X = df[selected_features]
y = df['Deaths_binary']  # Target column for Deaths

# Standardize the features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Split the data into training and testing sets (80:20)
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# Define Perceptron model
perceptron_model = Perceptron(max_iter=1000, random_state=42)

# Train the Perceptron model
perceptron_model.fit(X_train, y_train)

# Predict on the test set
y_pred = perceptron_model.predict(X_test)

# Print Classification Report for Perceptron
print("Classification Report for Perceptron:\n", classification_report(y_test, y_pred))

# Compute Confusion Matrix
cm = confusion_matrix(y_test, y_pred)

# Plot Confusion Matrix
plt.figure(figsize=(8, 6))
sns.heatmap(cm, annot=True, fmt="d", cmap="Blues")
plt.title('Perceptron Confusion Matrix')
plt.xlabel('Predicted Label')
plt.ylabel('True Label')
plt.show()

# Calculate Precision, Recall, F1-Score for each class
precision, recall, f1_score, _ = precision_recall_fscore_support(y_test, y_pred, average='binary')

# Print Precision, Recall, F1-Score
print(f"Precision: {precision:.2f}")
print(f"Recall: {recall:.2f}")
print(f"F1-Score: {f1_score:.2f}")

# Plot Precision, Recall, F1-Score over epochs
# Note: Perceptron does not provide epoch-wise metrics, so we'll plot only the final values

epochs = range(1, 2)  # Just one epoch as Perceptron is not an iterative model with multiple epochs
precision_list = [precision]
recall_list = [recall]
f1_score_list = [f1_score]

plt.figure(figsize=(10, 6))
plt.plot(epochs, precision_list, label='Precision', marker='o')
plt.plot(epochs, recall_list, label='Recall', marker='o')
plt.plot(epochs, f1_score_list, label='F1-Score', marker='o')
plt.title('Precision, Recall, F1-Score')
plt.xlabel('Epochs')
plt.ylabel('Score')
plt.legend()
plt.show()
