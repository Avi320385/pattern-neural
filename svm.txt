import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.svm import SVC
from sklearn.metrics import classification_report, confusion_matrix, precision_recall_fscore_support
import matplotlib.pyplot as plt
import seaborn as sns

# Load the dataset
file_path = 'pattern2.csv'
df = pd.read_csv(file_path)

# Convert 'Deaths' column to binary classification
df['Deaths_binary'] = (df['Deaths'] > 0).astype(int)

# Select features and target
selected_features = ['population', 'Cases', 'Deaths']
X = df[selected_features]
y = df['Deaths_binary']  # Target column for Deaths

# Standardize the features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Split the data into training and testing sets (80:20)
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# Define and train the SVM model
svm_model = SVC(kernel='linear', probability=True)
svm_model.fit(X_train, y_train)

# Compute predictions
y_pred_svm = svm_model.predict(X_test)
y_pred_proba_svm = svm_model.predict_proba(X_test)[:, 1]  # Probabilities for the positive class

# Print Classification Report for SVM
print("Classification Report for SVM:\n", classification_report(y_test, y_pred_svm))

# Plot Confusion Matrix for SVM
cm_svm = confusion_matrix(y_test, y_pred_svm)
plt.figure(figsize=(8, 6))
sns.heatmap(cm_svm, annot=True, fmt="d", cmap="Blues")
plt.title('SVM Confusion Matrix for Deaths')
plt.xlabel('Predicted Label')
plt.ylabel('True Label')
plt.show()

# Plot Accuracy and Loss (Accuracy is shown since SVM does not have a 'loss')
plt.figure(figsize=(10, 6))
# Accuracy Plot
train_accuracy = svm_model.score(X_train, y_train)
test_accuracy = svm_model.score(X_test, y_test)

plt.bar(['Train Accuracy', 'Test Accuracy'], [train_accuracy, test_accuracy], color=['blue', 'orange'])
plt.title('SVM Accuracy')
plt.ylabel('Accuracy')
plt.show()
