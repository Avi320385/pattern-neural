import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.metrics import confusion_matrix, accuracy_score
import matplotlib.pyplot as plt
import seaborn as sns

# Load the dataset
file_path = 'pattern2.csv'
df = pd.read_csv(file_path)

# Select features and target
X = df[['population', 'Cases', 'Deaths']]  # Features
y = df['Deaths']  # Target column

# Standardize the features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Split the data into training and testing sets (80:20)
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# Define and train the Linear Regression model
lr_model = LinearRegression()
lr_model.fit(X_train, y_train)

# Predict on the test set
y_pred = lr_model.predict(X_test)

# Convert continuous predictions to binary classifications
thresholds = np.linspace(min(y_pred), max(y_pred), 100)
accuracy_scores = []

# Calculate accuracy for various thresholds
for threshold in thresholds:
    y_pred_class = (y_pred > threshold).astype(int)
    accuracy = accuracy_score(y_test, y_pred_class)
    accuracy_scores.append(accuracy)

# Plot Accuracy Curve
plt.figure(figsize=(14, 6))

# Accuracy Curve
plt.subplot(1, 2, 1)
plt.plot(thresholds, accuracy_scores, label='Accuracy')
plt.xlabel('Threshold')
plt.ylabel('Accuracy')
plt.title('Accuracy Curve')
plt.legend()
plt.grid(True)

# Confusion Matrix for the Best Threshold
best_threshold = thresholds[np.argmax(accuracy_scores)]
y_pred_class_best = (y_pred > best_threshold).astype(int)
cm_best = confusion_matrix(y_test, y_pred_class_best)

plt.subplot(1, 2, 2)
sns.heatmap(cm_best, annot=True, fmt="d", cmap="Blues")
plt.title(f'Confusion Matrix (Threshold = {best_threshold:.2f})')
plt.xlabel('Predicted Label')
plt.ylabel('True Label')

plt.tight_layout()
plt.show()

# Evaluate the model using Mean Squared Error and R^2 Score
from sklearn.metrics import mean_squared_error, r2_score

mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print("Mean Squared Error:", mse)
print("R^2 Score:", r2)

# Plot the predicted vs actual values
plt.figure(figsize=(10, 6))
plt.scatter(y_test, y_pred, color='blue', alpha=0.5)
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], color='red', linestyle='--')
plt.xlabel('Actual Values')
plt.ylabel('Predicted Values')
plt.title('Actual vs Predicted Values')
plt.show()
